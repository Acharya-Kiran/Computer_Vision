----------------------------------------------------------------------------------------------------
Optical Flow
----------------------------------------------------------------------------------------------------
is the pattern of apparent motion of image objects between 2 consecutive frames caused by the movement of object or camera.

Assumptions-
- The pixel instensities of an object do not change between consecutive frames
- Neighbouring pixels have similar motion

The optical flow methods will first take a given set of points and a frame.
then it will attempt to find those points in the next frame.
##-------Using OpenCV we pass in previous frame, previous points and the current frame to the Lucas-Kanade function.
##------Lucas-Kanade computes optical flow for a sparse feature set -> meaning only the points it was told to track. It uses `least-squared criterion`-> same used for linear regression.
--ex. Lucas-Kanade Optical flow
corner_track_params = dict(maxCorners=10,qualityLevel=0.3,minDistance=7,blockSize=7)
lk_params = dict(winSize=(200,200),maxLevel=2,criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT,10,0.03)) 
#---you essentially going to have tradeoff between small & large winSize, Smaller window will be more sensitive to noise and we may miss larger motions.
#---Lucas-Kanade method can actually use this algo with what's known as `image pyramid`. maxLevel corresponds to the resolution in image pyramid, 0 being original img,
#---1 being 1/2 resolution, 2 being 1/4 resolution & so on. Lucas Kanade allows you to find optical flow at various resolutions of the image.
#---cv2.TERM_CRITERIA_EPS : 0.03 #--epsilon. smaller epsilon means we finish the search early. ---> accountable for speed of tracking
#---cv2.TERM_CRITERIA_COUNT : 10 #--max no. of iterations. more iterations means more exhaustive search for the points.---> accountable for accuracy of tracking


We can use Gunner Farneback's Algorithm  to calculate dense optical flow. This dense optical flow will calculate flow for all points in an image.
It will color them black if no flow/movement is detected. - `Two-Frame Motion Estimation Based on Polynomial Expansion`

----------------------------------------------------------------------------------------------------
Mean Shift
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
CAMShift (Continuously Adaptive Mean Shift)
----------------------------------------------------------------------------------------------------