--------------------------------------------------------------------------------------
Connecting to Camera
--------------------------------------------------------------------------------------
import cv2
cap = cv2.VideoCapture(0) #0 - indicates default camera
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int((cv2.CAP_PROP_FRAME_HEIGHT))
#---WINDOWS --> *'DIVX'
#---LINUX   --> *'XVID'
writer = cv2.VideoWriter('path', cv2.VideoWriter_fourcc(*'DIVX'),20 #-fps,(width,height))
 #--path with filename to store video as
 #--4 Byte code used to specify video codec used to write this, * indicates its param is passed as a C string.
 #-- cv2.CAP_PROP_FRAME_COUNT can be used to identify the rate.
while True:
    ret,frame = cap.read()
    gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    writer.write(gray)
    cv2.imshow('frame',gray)
    if cv2.waitKey(1) & 0xFF = ord('q'):
	break
cap.release()
writer.release()
cv2.destroyAllWindows()

--------------------------------------------------------------------------------------
Using Existing Video Files
--------------------------------------------------------------------------------------
import cv2
import time
cap = cv2.VideoCapture('video_path')
if cap.isOpened() == False:
    print('ERROR- FILE NOT FOUND') #-- OR file is not written with proper codec
while cap.isOpened():
    ret,frame = cap.read()
    if ret==True:
	time.sleep(1/20) #20- being the fps, this line is needed to view the image in the same rate it was recorded.
	cv2.imshow('frame',gray)
        if cv2.waitKey(1) & 0xFF = ord('q'):
	    break
    else:
	break
cap.release()
cv2.destroyAllWindows()


--------------------------------------------------------------------------------------
Drawing on Video
--------------------------------------------------------------------------------------
#_--------Drawing statically on videos
import cv2
cap = cv2.VideoCapture(0) #0 - indicates default camera
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int((cv2.CAP_PROP_FRAME_HEIGHT))
#--- drawing rectangle on each frame
#TOP LEFT CORNER
x = width//2
y = height//2
#width & height of rectangle
w = width//4
h = height//4
#BOTTOM RIGHT x+w,y+h
while True:
    ret,frame = cap.read()
    cv2.rectangle(frame,(x,y),(x+w,y+h),color=(255,0,0),thickness=4)
    cv2.imshow('frame',gray)
    if cv2.waitKey(1) & 0xFF = ord('q'):
	break
cap.release()
cv2.destroyAllWindows()

#--------Drawing interactively
import cv2

#CALLBACK FUNC RECTANGLE
def draw_rectangle(event,x,y,flags,param):
    global pt1,pt2,topLeft_clicked,botRight_clicked 
    if event == cv2.EVENT_LBUTTONDOWN:
        #RESET
        if topLeft_clicked and botRight_clicked:
	    pt1 = (0,0)
	    pt2 = (0,0)
	    topLeft_clicked = False
	    botRight_clicked = False
        if topLeft_clicked == False:
     	    pt1=(x,y)
            topLeft_clicked = True
   	elif botRight_clicked == False:
     	    pt2=(x,y)
            botRight_clicked = True


#GLOBAL VARIABLES
pt1 = (0,0)
pt2 = (0,0)
topLeft_clicked = False
botRight_clicked = False

#CONNECT TO CALLBACK
cap = cv2.VideoCapture(0)
cv2.namedWindow('Test')
cv2.setMouseCallback('Test',draw_rectangle)
while True:
    ret,frame = cap.read()

    #DRAWING ON FRAME BASED ON GLOBAL VARIABLES
    if topLeft_clicked:
	cv2.Circle(frame,center=pt1,radius=5,color=(0,0,255),thickness=-1)
    if topLeft_clicked and botRight_clicked:
	cv2.rectangle(frame,pt1,pt2,(0,0,255),3)
    cv2.imshow('Test',frame)
    if cv2.waitKey(1) & 0xFF = ord('q'):
	break
cap.release()
cv2.destroyAllWindows()

